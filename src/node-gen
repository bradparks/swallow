#!/usr/bin/perl
use strict;
use warnings;
die "node-gen class base type\n" if @ARGV != 3;

sub fileName
{
	my $file = shift;
	$file =~ s/([A-Z])/-$1/g;
	$file =~ s/^-//;
	return lc($file);
}

my ($class, $base, $type) = @ARGV;
my $macro = $class;
$macro =~ s/([A-Z])/_$1/g;
$macro =~ s/^_//;
$macro = uc($macro) . "_H";

my $baseHeader = fileName($base) . ".h";




print <<EOF
#ifndef $macro
#define $macro
#include "$baseHeader"
#include <string>

SWIFT_NS_BEGIN

class $class : public $base
{
public:
    $class();
public:
    virtual void serialize(std::wostream& out);
private:
};

SWIFT_NS_END

#endif//$macro
EOF
if $type eq "h";

my $header = fileName($class) . ".h";
print <<EOF

#include "$header"
USE_SWIFT_NS


${class}::${class}()
    :$base(0)
{
}
void ${class}::serialize(std::wostream& out)
{
    out<<value;
}

EOF
if $type eq "cpp";
